#!/bin/bash
row=0
column=0
row2=0
column2=0

function dims(){   
    CheckViableFile $1
    echo $row $column
}

function transpose(){
    CheckViableFile $1
    number=1
    while [ "$number" -le "$row" ]
    do
	#echo "Number = $number"
	cut -f $number $1 | cat | tr '\n' '\t' >> tempFile 
	echo >> tempFile
	#cat tempFile
	#echo "\n" >> tempFile2
	
	number=$((number+1))
    done
    cat tempFile
    rm tempFile    
}

function mean(){
    CheckViableFile $1
    number=1
    while [ "$number" -le "$column" ]
    do
	cut -f $number $1 | cat | tr '\n' '\t' > tempFile
	nums=$(<tempFile)
	sum=0
	mean=0

	for i in ${nums[@]}
	do
	    sum=$((sum+i))  	    
	done
	
	mean=$((sum/row))
	echo $mean | tr '\n' '\t' >> tempFile2

	number=$((number+1))
    done
    
    echo >> tempFile2
    cat tempFile2
    rm tempFile
    rm tempFile2
}

function add(){
    CheckViableFile $1
    CheckViableFile $2 2
    #echo matrix1: $row $column
    #echo matrix2: $row2 $column2
    if [ $row != $row2 ] || [ $column != $column2 ]
    then
	echo Matrix dimensions do not match! 1>&2
	exit 2
    #else
	#echo Matrix dimensions match!
    fi    
    
    number=1
    while [ "$number" -le "$row" ]
    do
	cat $1 | head -$number | tail -1 > tempFile
	cat $2 | head -$number | tail -1 > tempFile2
	#echo Row $number
	#cat tempFile	
	#cat tempFile2
	nums=$(<tempFile)
	counter=1
	for i in ${nums[@]}
	do 
	    op1=$i
	    op2=$(cut -f $counter tempFile2 | cat)
	    #echo op1 $op1
	    #echo op2 $op2
	    sum=$((op1+op2))
	    echo $sum | tr '\n' '\t' >> tempFile3 

	    counter=$((counter+1))    
	done	
	echo >> tempFile3	

	number=$((number+1))
    done
    
    cat tempFile3    
    rm tempFile3
    rm tempFile2
    rm tempFile
}

function multiply(){
    CheckViableFile $1
    CheckViableFile $2 2
    #echo matrix1: $row $column
    #echo matrix2: $row2 $column2
    if [ $row != $row2 ] || [ $column != $column2 ]
    then
	echo Matrix dimensions do not match! 1>&2
	exit 2
    #else
	#echo Matrix dimensions match!
    fi    
    
    number=1
    while [ "$number" -le "$row" ]
    do
	cat $1 | head -$number | tail -1 > tempFile
	cat $2 | head -$number | tail -1 > tempFile2
	#echo Row $number
	#cat tempFile	
	#cat tempFile2
	nums=$(<tempFile)
	counter=1
	for i in ${nums[@]}
	do 
	    op1=$i
	    op2=$(cut -f $counter tempFile2 | cat)
	    #echo op1 $op1
	    #echo op2 $op2
	    product=$((op1*op2))
	    echo $product | tr '\n' '\t' >> tempFile3 

	    counter=$((counter+1))    
	done	
	echo >> tempFile3	

	number=$((number+1))
    done
    
    cat tempFile3    
    rm tempFile3
    rm tempFile2
    rm tempFile
}

function CheckViableFile(){
    totalWordCount=$(wc -w $1 | cut -d " " -f 1) #$(cat wordCountFile | cut -d " " -f 2)
    totalLineCount=$(wc -l $1 | cut -d " " -f 1) #$(cat wordCountFile | cut -d " " -f 1)
    #echo "$totalWordCount"    
    #echo "$totalLineCount"
    head -n 1 $1 > wordCountFile
    singleLineCount=$(cat wordCountFile | wc -w)
    calculatedWordCount=$( expr $totalLineCount \* $singleLineCount)
    #echo calculated word count $calculatedWordCount
    #echo total word count $totalWordCount
    rm wordCountFile
    if [[ $calculatedWordCount == $totalWordCount ]]
    then
        #echo Matrix is proper!
	if [[ $2 == 2 ]]
	then
	    #echo Second Matrix Detected
	    row2=$totalLineCount
	    column2=$singleLineCount
	else
	    row=$totalLineCount
	    column=$singleLineCount
	fi

    else
        echo "Matrix is not proper!" 1>&2
	exit 1
    fi
}

case "$1" in
    ("dims")
	dims $2
	;;
    ("transpose")
	transpose $2
	;;
    ("mean")
	mean $2
	;;
    ("add")
	add $2 $3
	;;
    ("multiply")
	multiply $2 $3
	;;
esac
